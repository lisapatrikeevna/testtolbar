[{"E:\\react\\test\\test-dmin-bar\\src\\index.tsx":"1","E:\\react\\test\\test-dmin-bar\\src\\reportWebVitals.ts":"2","E:\\react\\test\\test-dmin-bar\\src\\redux\\store.ts":"3","E:\\react\\test\\test-dmin-bar\\src\\App.tsx":"4","E:\\react\\test\\test-dmin-bar\\src\\redux\\productReducer.ts":"5","E:\\react\\test\\test-dmin-bar\\src\\changeProductsPage.tsx":"6","E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\productList.tsx":"7","E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\itemProduct.tsx":"8","E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\toolbar.tsx":"9","E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\sort\\Sort.tsx":"10","E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\newProduct.tsx":"11","E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\currency\\currency.tsx":"12","E:\\react\\test\\test-dmin-bar\\src\\expansive\\validate.tsx":"13","E:\\react\\test\\test-dmin-bar\\src\\expansive\\Input.tsx":"14","E:\\react\\test\\test-dmin-bar\\src\\expansive\\filtered.ts":"15","E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\range.tsx":"16","E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\Wrange.tsx":"17"},{"size":639,"mtime":1611135392496,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1606577166090,"results":"20","hashOfConfig":"19"},{"size":422,"mtime":1611141145737,"results":"21","hashOfConfig":"19"},{"size":264,"mtime":1613927421634,"results":"22","hashOfConfig":"19"},{"size":2756,"mtime":1613909817942,"results":"23","hashOfConfig":"19"},{"size":525,"mtime":1613689419513,"results":"24","hashOfConfig":"19"},{"size":1710,"mtime":1613924078568,"results":"25","hashOfConfig":"19"},{"size":674,"mtime":1613927755132,"results":"26","hashOfConfig":"19"},{"size":2378,"mtime":1613947374596,"results":"27","hashOfConfig":"19"},{"size":2530,"mtime":1611143646073,"results":"28","hashOfConfig":"19"},{"size":4410,"mtime":1613938954275,"results":"29","hashOfConfig":"19"},{"size":847,"mtime":1613750484340,"results":"30","hashOfConfig":"19"},{"size":913,"mtime":1613912943997,"results":"31","hashOfConfig":"19"},{"size":2701,"mtime":1613929476088,"results":"32","hashOfConfig":"19"},{"size":925,"mtime":1613924078559,"results":"33","hashOfConfig":"19"},{"size":3052,"mtime":1613944632124,"results":"34","hashOfConfig":"19"},{"size":7628,"mtime":1613947374590,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"sycqaz",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"E:\\react\\test\\test-dmin-bar\\src\\index.tsx",[],["75","76"],"E:\\react\\test\\test-dmin-bar\\src\\reportWebVitals.ts",[],"E:\\react\\test\\test-dmin-bar\\src\\redux\\store.ts",[],"E:\\react\\test\\test-dmin-bar\\src\\App.tsx",[],"E:\\react\\test\\test-dmin-bar\\src\\redux\\productReducer.ts",["77"],"export type productsType = {\r\n    id: number\r\n    name: string\r\n    price: number\r\n    image: string\r\n    description: string\r\n}\r\ntype productInitialStateType = {\r\n    products: Array<productsType>\r\n    sort: string\r\n    filterMin: number\r\n    filterMax: number\r\n    currency: string\r\n}\r\nlet initialState: productInitialStateType = {\r\n    products: [],\r\n    sort: 'ABC',\r\n    filterMin: 0,\r\n    filterMax: 11000,\r\n    currency: \"UAN\"\r\n}\r\ntype setProductACACType = ReturnType<typeof setProductAC>\r\ntype setCurrencyACType = ReturnType<typeof setCurrencyAC>\r\ntype setNewProductACType = ReturnType<typeof setNewProductAC>\r\ntype sortTypeACType = ReturnType<typeof sortTypeAC>\r\ntype setMinTypeACType = ReturnType<typeof setMinTypeAC>\r\ntype setMaxTypeACType = ReturnType<typeof setMaxTypeAC>\r\ntype ActionType =\r\n    setProductACACType\r\n    | setNewProductACType\r\n    | sortTypeACType\r\n    | setMinTypeACType\r\n    | setMaxTypeACType\r\n    | setCurrencyACType\r\nexport const ProductReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SET_PRODUCT':\r\n            return {\r\n                ...state, products: action.products\r\n            }\r\n        case 'SET_NEW_PRODUCT':\r\n            return {\r\n                ...state, products: [ action.newProduct,...state.products]\r\n            }\r\n        case 'SORT_TYPE_PRODUCT': {\r\n            return {\r\n                ...state, sort: action.sortType\r\n            }\r\n        }\r\n        case 'SORT_TYPE_MIN':\r\n            return {\r\n                ...state, filterMin: action.num\r\n            }\r\n        case 'SORT_TYPE_MAX':\r\n            return {\r\n                ...state, filterMax: action.num\r\n            }\r\n        case \"SET_CURRENCY\":\r\n            return {   ...state,\r\n                currency: action.payload,\r\n                products: state.products.map((pr) => {\r\n                    if (action.payload === 'UAN') {\r\n                        return {...pr, price: pr.price * 2}\r\n                    } else {\r\n                        return {...pr, price: pr.price / 2}\r\n                    }\r\n                })\r\n            }\r\n        default  :\r\n            return state;\r\n    }\r\n}\r\nexport const setProductAC = (products: Array<productsType>) => ({type: 'SET_PRODUCT', products} as const)\r\nexport const setNewProductAC = (newProduct: productsType) => ({type: 'SET_NEW_PRODUCT', newProduct} as const)\r\nexport const sortTypeAC = (sortType: string) => ({type: 'SORT_TYPE_PRODUCT', sortType} as const)\r\nexport const setMinTypeAC = (num: number) => ({type: 'SORT_TYPE_MIN', num} as const)\r\nexport const setMaxTypeAC = (num: number) => ({type: 'SORT_TYPE_MAX', num} as const)\r\nexport const setCurrencyAC = (payload: string) => ({type: 'SET_CURRENCY', payload} as const)\r\n","E:\\react\\test\\test-dmin-bar\\src\\changeProductsPage.tsx",[],"E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\productList.tsx",["78"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {RootStateType} from '../../redux/store'\r\nimport {productsType, setProductAC} from \"../../redux/productReducer\"\r\nimport cl from './ProductList.module.css'\r\nimport data from '../../redux/products.json'\r\nimport ItemProduct from './itemProduct'\r\nimport {sortArrProd} from \"../../redux/filtered\";\r\n\r\n\r\nconst ProductList = () => {\r\n    // useEffect(() => {\r\n    //     const data1: any  = data\r\n    //     debugger\r\n    //\r\n    // }, [])\r\n    let filterMin =useSelector<RootStateType,number>(state => state.products.filterMin)\r\n    let filterMax =useSelector<RootStateType,number>(state => state.products.filterMax)\r\n    let currency =useSelector<RootStateType,string>(state => state.products.currency)\r\n\r\n    const dispatch = useDispatch()\r\n    let products = useSelector<RootStateType, Array<productsType>>(state => state.products.products)\r\n    let ollProducts = products\r\n    console.log(ollProducts)\r\n    const abcType = useSelector<RootStateType, string>(state => state.products.sort)\r\n\r\n    useEffect(() => {\r\n        const data1: any  = data\r\n        if(products.length <data1.products.length){\r\n            dispatch(setProductAC(data1.products))\r\n        }else {\r\n            dispatch(setProductAC(products))\r\n        }\r\n    }, [dispatch,ollProducts])\r\n\r\n    ollProducts = ollProducts.filter(p=> Number(p.price) >= Number(filterMin) && Number(p.price) <= Number(filterMax))\r\n\r\n    const product = sortArrProd(ollProducts, abcType).map(p => <ItemProduct key={p.id} id={p.id} image={p.image} name={p.name} description={p.description} price={p.price} currency={currency}/>)\r\n\r\n    return (\r\n        <div className={cl.ollWrap}>\r\n            {product}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductList;","E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\itemProduct.tsx",[],"E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\toolbar.tsx",["79","80"],"E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\sort\\Sort.tsx",["81"],"import React, {ChangeEvent, useState, KeyboardEvent, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport cl from './Sort.module.css';\nimport {sortTypeAC} from \"../../../redux/productReducer\";\nimport {RootStateType} from \"../../../redux/store\";\n\ntype ItemType = {\n    title: string\n    value: any\n}\ntype SelectType = {\n    items: ItemType[]\n}\nexport const Sort = (props:SelectType) => {\n    const dispatch = useDispatch()\n    let value = useSelector<RootStateType,string>(state => state.products.sort)\n    const [active, setActive] = useState(false);\n    const [hoverEL, setHoverEL] = useState(value);\n    const onChange =(value:string)=>{\n        dispatch(sortTypeAC(value))\n    }\n    const selectedItem = props.items.find(i => i.value === value)\n    const hoveredItem = props.items.find(i => i.value === hoverEL)\n\n    useEffect(() => {\n        setHoverEL(value);\n    }, [value])\n\n    const showActive = () => { setActive(!active) }\n    const itemClicked = (value: any) => {\n        onChange(value);\n        showActive();\n    }\n    const onKeyUp = (e: KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n            for (let i = 0; i < props.items.length; i++) {\n                if (props.items[i].value === hoverEL) {\n                    const pretendentElement = e.key === 'ArrowDown' ? props.items[i + 1] : props.items[i - 1];\n                    if (pretendentElement) {\n                        onChange(pretendentElement.value)\n                        setHoverEL(props.items[i+1].value);\n                        return;\n                    }\n                }\n            }\n            if (!selectedItem) {\n                onChange(props.items[0].value);\n            }\n        }\n        if (e.key === 'Enter' || e.key === 'Escape') {\n            setActive(false);\n        }\n    }\n\n    return (\n        <div  className={cl.select} onKeyUp={onKeyUp} tabIndex={0}>\n            <h3 onClick={showActive} className={cl.mainTitle}>{selectedItem && selectedItem.title}</h3>\n            {active &&\n            <div className={cl.items}>\n                {props.items.map(i =>\n                    <div key={i.value}\n                         onMouseEnter={() => { setHoverEL(i.value) }}\n                         onClick={() => {  itemClicked(i.value) }}\n                         className={cl.item + (hoveredItem === i ? cl.selected : '')} >\n                        {i.title}\n                    </div>)}\n            </div>\n            }\n        </div>\n    )\n}","E:\\react\\test\\test-dmin-bar\\src\\common\\productList\\newProduct.tsx",["82","83","84","85","86","87","88","89","90"],"E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\currency\\currency.tsx",[],"E:\\react\\test\\test-dmin-bar\\src\\expansive\\validate.tsx",[],"E:\\react\\test\\test-dmin-bar\\src\\expansive\\Input.tsx",["91"],"E:\\react\\test\\test-dmin-bar\\src\\expansive\\filtered.ts",[],"E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\range.tsx",["92"],"E:\\react\\test\\test-dmin-bar\\src\\common\\toolbar\\Wrange.tsx",["93","94","95"],"import React, {ChangeEvent} from \"react\";\r\nimport './wrange.scss';\r\n\r\n\r\ntype stateType={\r\n    sliderWidth: number\r\n    offsetSliderWidht: number\r\n    min: number\r\n    max: number\r\n    minValueBetween: number\r\n    currentMin: number\r\n    inputMin: number\r\n    currentMax: number\r\n    inputMax: number\r\n}\r\ntype propsType={\r\n    min:number\r\n    max:number\r\n    // setValue1:(v1:number)=>void\r\n    // setValue2:(v2:number)=>void\r\n}\r\nexport class DoubleRangeSlider extends React.Component<propsType> {\r\n    slider: any\r\n    minValue: any\r\n    maxValue: any\r\n    onMouseUp: any\r\n    maxValueDrag: any\r\n    minValueDrag: any\r\n    state:stateType = {\r\n        sliderWidth: 0,\r\n        offsetSliderWidht: 0,\r\n        // min: 0,\r\n        min:this.props.min,\r\n        // max: 200,\r\n        max: this.props.max,\r\n        minValueBetween: 10,\r\n        currentMin: 55,\r\n        inputMin: 55,\r\n        currentMax: 100,\r\n        inputMax: 100\r\n    };\r\n    componentDidMount() {\r\n        const { currentMin, currentMax, max } = this.state;\r\n        this.minValue.style.width = (currentMin*100)/max + \"%\";\r\n        this.maxValue.style.width = (currentMax*100)/max + \"%\";\r\n\r\n        this.setState({\r\n            sliderWidth: this.slider.offsetWidth,\r\n            offsetSliderWidht: this.slider.offsetLeft,\r\n        })\r\n    }\r\n\r\n    setMin = (e:any) => {\r\n        const { min, max, currentMax, minValueBetween } = this.state;\r\n        const inputMin = e.target.value;\r\n\r\n        this.setState({\r\n            inputMin\r\n        });\r\n\r\n        if((+inputMin >= min) && (+inputMin <= (currentMax-minValueBetween))){\r\n            this.setState({\r\n                currentMin: parseInt(inputMin)\r\n            });\r\n\r\n            this.minValue.style.width = (+inputMin*100)/max + \"%\";\r\n        }\r\n    }\r\n\r\n    changeMinValue = (e:any) => {\r\n        e.preventDefault();\r\n\r\n        document.addEventListener('mousemove', this.onMouseMoveMin);\r\n        document.addEventListener('mouseup', this.onMouseUpMin);\r\n\r\n        document.addEventListener('touchmove', this.onMouseMoveMin);\r\n        document.addEventListener('touchend', this.onMouseUpMin);\r\n    }\r\n\r\n    onMouseMoveMin = (e:any) => {\r\n        const { min, max, currentMax, minValueBetween, sliderWidth, offsetSliderWidht } = this.state;\r\n\r\n        const dragedWidht = e.clientX - offsetSliderWidht;\r\n        const dragedWidhtInPercent:number = (dragedWidht*100)/sliderWidth;\r\n        console.log(typeof dragedWidhtInPercent);\r\n        const currentMin = Math.abs((max * dragedWidhtInPercent)/100);\r\n        this.props.setValue1( currentMin);\r\n        console.log(e.pageX, e.clientX, offsetSliderWidht);\r\n\r\n        console.log(currentMin , (currentMax-minValueBetween));\r\n\r\n        console.log((max * dragedWidhtInPercent)/100);\r\n\r\n        if( (currentMin >= min) && (currentMin <= (currentMax-minValueBetween))){\r\n            this.minValue.style.width = dragedWidhtInPercent + \"%\";\r\n            this.minValue.dataset.content = currentMin;\r\n\r\n            this.setState({\r\n                currentMin,\r\n                inputMin: currentMin\r\n            })\r\n        }\r\n    }\r\n\r\n    onMouseUpMin = () => {\r\n        document.removeEventListener('mouseup', this.onMouseUpMin);\r\n        document.removeEventListener('mousemove', this.onMouseMoveMin);\r\n\r\n        document.removeEventListener('touchend', this.onMouseMoveMin);\r\n        document.removeEventListener('touchmove', this.onMouseUpMin);\r\n    }\r\n    \r\n    setMax = (e:ChangeEvent<HTMLInputElement>) => {\r\n        const { min, max, currentMin, currentMax, minValueBetween } = this.state;\r\n\r\n        const inputMax = e.target.value;\r\n\r\n        this.setState({\r\n            inputMax\r\n        });\r\n\r\n        if((+inputMax >= currentMin + minValueBetween) && (+inputMax <= max)){\r\n\r\n            this.setState({\r\n                currentMax: parseInt(inputMax)\r\n            });\r\n            this.maxValue.style.width = (+inputMax*100)/max + \"%\";\r\n        }\r\n\r\n    }\r\n\r\n    changeMaxValue = (e:any) => {\r\n        e.preventDefault();\r\n\r\n        document.addEventListener('mousemove', this.onMouseMoveMax);\r\n        document.addEventListener('mouseup', this.onMouseUpMax);\r\n\r\n        document.addEventListener('touchmove', this.onMouseMoveMax);\r\n        document.addEventListener('touchend', this.onMouseUpMax);\r\n    }\r\n\r\n    onMouseMoveMax = (e:any) => {\r\n        const { max, currentMin, minValueBetween, sliderWidth, offsetSliderWidht} = this.state;\r\n        const maxWalueThumb = this.maxValue;\r\n        const dragedWidht = e.clientX - offsetSliderWidht;\r\n        const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\r\n        const currentMax = Math.abs(((max * dragedWidhtInPercent)/100));\r\n        this.props.setValue2( currentMax);\r\n        if( (currentMax >= (currentMin + minValueBetween)) && (currentMax <= max)){\r\n\r\n            maxWalueThumb.style.width = dragedWidhtInPercent + \"%\";\r\n            maxWalueThumb.dataset.content = currentMax;\r\n            this.setState({\r\n                currentMax,\r\n                inputMax: currentMax\r\n            })\r\n        }\r\n    }\r\n\r\n    onMouseUpMax = () => {\r\n        document.removeEventListener('mouseup', this.onMouseUp);\r\n        document.removeEventListener('mousemove', this.onMouseMoveMax);\r\n\r\n        document.removeEventListener('touchend', this.onMouseUp);\r\n        document.removeEventListener('touchmove', this.onMouseMoveMax);\r\n    }\r\n\r\n    maxForMin = () => {\r\n        const { currentMax, minValueBetween} = this.state;\r\n        if(currentMax)return currentMax - minValueBetween;\r\n    }\r\n\r\n    minForMax = () => {\r\n        const { currentMin, minValueBetween} = this.state;\r\n        if(currentMin) return currentMin + minValueBetween;\r\n        else return 0\r\n    }\r\n\r\n    render() {\r\n        const { min, max, currentMin, inputMin, currentMax, inputMax, minValueBetween } = this.state;\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <h2>Double range slider</h2>\r\n                <div className=\"current-value\">\r\n                    <label htmlFor=\"min-input\">Min: </label>\r\n                    <input\r\n                        id=\"min-input\"\r\n                        type=\"number\"\r\n                        onChange={this.setMin}\r\n                        value={inputMin}\r\n                        min={min}\r\n                        max={this.maxForMin()}\r\n                    />\r\n\r\n                    <br/>\r\n                    <label htmlFor=\"max-input\">Max: </label>\r\n                    <input\r\n                        id=\"max-input\"\r\n                        type=\"number\"\r\n                        onChange={this.setMax}\r\n                        value={inputMax}\r\n                        min={this.minForMax()}\r\n                        max={max}/>\r\n\r\n                </div>\r\n\r\n                <div className=\"values\">\r\n                    <div>{ min }</div>\r\n                    <div>{ max }</div>\r\n                </div>\r\n\r\n                <div ref={ref => this.slider = ref} id=\"slider\">\r\n\r\n                    <div ref={ref => this.minValue = ref} id=\"min\" data-content={currentMin}>\r\n                        <div ref={ref => this.minValueDrag = ref} id=\"min-drag\" onMouseDown ={this.changeMinValue} onTouchStart={this.changeMinValue}></div>\r\n                    </div>\r\n\r\n                    <div ref={ref => this.maxValue = ref} id=\"max\" data-content={currentMax}>\r\n                        <div ref={ref => this.maxValueDrag = ref} id=\"max-drag\" onMouseDown={this.changeMaxValue} onTouchStart={this.changeMaxValue}></div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":48,"column":17,"nodeType":"102","messageId":"103","endLine":48,"endColumn":20},{"ruleId":"104","severity":1,"message":"105","line":34,"column":8,"nodeType":"106","endLine":34,"endColumn":30,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"108","line":1,"column":29,"nodeType":"102","messageId":"103","endLine":1,"endColumn":37},{"ruleId":"100","severity":1,"message":"109","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":13},{"ruleId":"100","severity":1,"message":"110","line":1,"column":16,"nodeType":"102","messageId":"103","endLine":1,"endColumn":27},{"ruleId":"100","severity":1,"message":"111","line":3,"column":9,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"112","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":17},{"ruleId":"100","severity":1,"message":"113","line":5,"column":9,"nodeType":"102","messageId":"103","endLine":5,"endColumn":13},{"ruleId":"100","severity":1,"message":"114","line":6,"column":8,"nodeType":"102","messageId":"103","endLine":6,"endColumn":22},{"ruleId":"100","severity":1,"message":"115","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":18},{"ruleId":"100","severity":1,"message":"116","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":17},{"ruleId":"100","severity":1,"message":"110","line":10,"column":16,"nodeType":"102","messageId":"103","endLine":10,"endColumn":27},{"ruleId":"100","severity":1,"message":"117","line":12,"column":26,"nodeType":"102","messageId":"103","endLine":12,"endColumn":38},{"ruleId":"100","severity":1,"message":"118","line":17,"column":8,"nodeType":"102","messageId":"103","endLine":17,"endColumn":12},{"ruleId":"100","severity":1,"message":"119","line":36,"column":11,"nodeType":"102","messageId":"103","endLine":36,"endColumn":18},{"ruleId":null,"fatal":true,"severity":2,"message":"120","line":76,"column":28},{"ruleId":"100","severity":1,"message":"121","line":115,"column":17,"nodeType":"102","messageId":"103","endLine":115,"endColumn":20},{"ruleId":"100","severity":1,"message":"122","line":115,"column":39,"nodeType":"102","messageId":"103","endLine":115,"endColumn":49},{"ruleId":"100","severity":1,"message":"123","line":181,"column":71,"nodeType":"102","messageId":"103","endLine":181,"endColumn":86},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"@typescript-eslint/no-unused-vars","'ppp' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'useState' is defined but never used.","'Range' is defined but never used.","'ChangeEvent' is defined but never used.","'green' is defined but never used.","'InputBase' is defined but never used.","'fade' is defined but never used.","'createMuiTheme' is defined but never used.","'withStyles' is defined but never used.","'TextField' is defined but never used.","'setProductAC' is defined but never used.","'data' is defined but never used.","'classes' is assigned a value but never used.","Parsing error: ',' expected.","'min' is assigned a value but never used.","'currentMax' is assigned a value but never used.","'minValueBetween' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [dispatch, ollProducts, products]",{"range":"129","text":"130"},[1333,1355],"[dispatch, ollProducts, products]"]